"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"python-multiple-inheritance","metadata":{"permalink":"/blog/python-multiple-inheritance","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-04-01-multiple-inheritance.md","source":"@site/blog/2023-04-01-multiple-inheritance.md","title":"Multiple Inheritance in Python","description":"What is Multiple Inheritance in Python?","date":"2023-04-01T00:00:00.000Z","formattedDate":"April 1, 2023","tags":[{"label":"python","permalink":"/blog/tags/python"}],"readingTime":3.425,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong","title":"author","url":"https://github.com/dannyseong","imageURL":"https://avatars.githubusercontent.com/u/99000722?v=4","key":"daehoon"}],"frontMatter":{"slug":"python-multiple-inheritance","title":"Multiple Inheritance in Python","authors":["daehoon"],"tags":["python"]},"nextItem":{"title":"Why Object-oriented Programming?","permalink":"/blog/cs-why-oop"}},"content":"## What is Multiple Inheritance in Python?\\n\\nMultiple inheritance is a feature in object-oriented programming that allows a class to inherit attributes and methods from more than one parent class. This feature enables a subclass to combine the behaviour of multiple classes into a single class, resulting in more concise and maintainable code.\\n\\n:::tip Possible\\n\ud83d\udc4c C++, Python\\n:::\\n\\n:::danger Not-possible\\n\u26d4 Java, C#, JavaScript\\n:::\\n\\n## Defining a Class with Multiple Inheritance\\n\\nIn Python, defining a class with multiple inheritance is as simple as listing the parent classes in the class definition separated by commas. For example:\\n\\n```python\\nclass Parent1:\\n    def method1(self):\\n        print(\\"Parent1 method1\\")\\n\\nclass Parent2:\\n    def method2(self):\\n        print(\\"Parent2 method2\\")\\n\\nclass Child(Parent1, Parent2):\\n    def method3(self):\\n        print(\\"Child method3\\")\\n```\\n\\nIn this example, the class **`Child`** inherits from both **`Parent1`** and **`Parent2`**, and also defines its own method **`method3`**.\\n\\n## Calling Methods from Parent Classes\\n\\nOnce we have defined a class with multiple inheritance, we can call methods from parent classes just as we would with a single parent class. For example:\\n\\n```python\\n>>> c = Child()\\n>>> c.method1()\\nParent1 method1\\n>>> c.method2()\\nParent2 method2\\n>>> c.method3()\\nChild method3\\n```\\n\\nThis example demonstrates how we can call methods from both **`Parent1`** and **`Parent2`**, as well as from the **`Child`** class.\\n\\n## Method Resolution Order (MRO)\\n\\nWhen a class has multiple parent classes, it\'s important to understand the method resolution order (MRO) to determine which method should be called when there are conflicts. The MRO is a linear ordering of the inheritance hierarchy that determines the order in which methods are searched for and called.\\n\\nIn Python, we can access the MRO using the **`mro()`** method. For example:\\n\\n```python\\nclass Parent1:\\n    def method(self):\\n        print(\\"Parent1 method\\")\\n\\nclass Parent2:\\n    def method(self):\\n        print(\\"Parent2 method\\")\\n\\nclass Child(Parent1, Parent2):\\n    pass\\n\\nprint(Child.mro())\\n```\\n\\nThis code demonstrates how to access the MRO of the **`Child`** class. The output of this code will be:\\n\\n```python\\n[<class \'__main__.Child\'>, <class \'__main__.Parent1\'>, <class \'__main__.Parent2\'>, <class \'object\'>]\\n```\\n\\nThis tells us that when we call **`method()`** on an object of type **`Child`**, Python will first search for the method in **`Child`**, then in **`Parent1`**, then in **`Parent2`**, and finally in the built-in **`object`** class.\\n\\n## Handling Name Conflicts in Multiple Inheritance\\n\\nWhen we define a class with multiple inheritance, there may be cases where parent classes have methods with the same name. In such cases, we need to use the MRO to determine which method should be called.\\n\\nOne way to handle name conflicts is to use method aliases. For example:\\n\\n```python\\nclass Parent1:\\n    def method(self):\\n        print(\\"Parent1 method\\")\\n\\nclass Parent2:\\n    def method(self):\\n        print(\\"Parent2 method\\")\\n\\nclass Child(Parent1, Parent2):\\n    def parent1_method(self):\\n        Parent1.method(self)\\n\\n    def parent2_method(self):\\n        Parent2.method\\n```\\n\\nIn this example, we create two methods, **`parent1_method`** and **`parent2_method`**, which call the **`method`** of **`Parent1`** and **`Parent2`** respectively. This way, we can distinguish between methods of parent classes that share the same name.\\n\\nAnother way to handle name conflicts is to use the **`super()`** function to call the parent method. The **`super()`** function automatically determines the MRO and calls the method of the next class in the MRO. For example:\\n\\n```python\\nclass Parent1:\\n    def method(self):\\n        print(\\"Parent1 method\\")\\n\\nclass Parent2:\\n    def method(self):\\n        print(\\"Parent2 method\\")\\n\\nclass Child(Parent1, Parent2):\\n    def method(self):\\n        super().method()\\n```\\n\\nIn this example, we define a **`Child`** class that inherits from **`Parent1`** and **`Parent2`**. The **`Child`** class also defines a **`method`** that calls the **`method`** of the next class in the MRO using the **`super()`** function. This way, we can call the **`method`** of both parent classes without having to use method aliases.\\n\\n## Conclusion\\n\\nMultiple inheritance is a powerful feature of object-oriented programming that allows us to combine the behavior of multiple classes into a single class. In Python, we can define a class with multiple inheritance by listing the parent classes in the class definition, separated by commas. We can call methods from parent classes just as we would with a single parent class. When conflicts arise between the methods of parent classes, we can use the MRO to determine which method should be called. We can also disambiguate between methods with the same name using method aliases or the **`super()`** function."},{"id":"cs-why-oop","metadata":{"permalink":"/blog/cs-why-oop","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-31-why-oop.md","source":"@site/blog/2023-03-31-why-oop.md","title":"Why Object-oriented Programming?","description":"In the world of computer programming, the complexity of the code being written has increased with the evolution of computers. Programming languages and best practices have evolved to suit the needs of developers, leading to what we now call programming paradigms. A programming paradigm is a specific style of organizing and writing programs with the goal of increased organization, fewer bugs, and better code maintainability.","date":"2023-03-31T00:00:00.000Z","formattedDate":"March 31, 2023","tags":[{"label":"cs","permalink":"/blog/tags/cs"},{"label":"oop","permalink":"/blog/tags/oop"}],"readingTime":3.065,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong","title":"author","url":"https://github.com/dannyseong","imageURL":"https://avatars.githubusercontent.com/u/99000722?v=4","key":"daehoon"}],"frontMatter":{"slug":"cs-why-oop","title":"Why Object-oriented Programming?","authors":["daehoon"],"tags":["cs","oop"]},"prevItem":{"title":"Multiple Inheritance in Python","permalink":"/blog/python-multiple-inheritance"},"nextItem":{"title":"Lambda Function in Python","permalink":"/blog/python-lambda-function"}},"content":"In the world of computer programming, the complexity of the code being written has increased with the evolution of computers. Programming languages and best practices have evolved to suit the needs of developers, leading to what we now call programming paradigms. A programming paradigm is a specific style of organizing and writing programs with the goal of increased organization, fewer bugs, and better code maintainability.\\n\\n## Data and Behavior in Programs\\n\\n- All programs have two fundamental components: `data` and `behavior`.\\n- The data is what the program knows, and the behavior is what the program can do with its data.\\n\\n## Popular Programming Paradigms: Procedural, Functional and Object-oriented\\n\\n:::tip My tip\\nThe primary focus of a programming paradigm is how a program deals with its data and behaviour.\\n:::\\n\\n### Procedural programming paradigm\\n\\nIn the procedural programming paradigm, the data and behaviors are combined into the same set of step-by-step instructions. When we need to use the behaviors, we manipulate the data directly, thus changing the overall state of our applications. The order of our code is crucial, and our data is mutated directly as the program carries out its behavior. This can make it challenging to manage complex programs and maintain code over time.\\n\\n### Functional programming paradigm\\n\\nIn the functional programming paradigm, the data and behavior are kept separate. When we want to use the behaviors, we abstract them into pure functions that take our data as input and return an updated copy of our data as output, rather than directly mutating the data. Instead of mutating the data directly, we rely on pure functions to return a new copy of updated data. This paradigm promotes code modularity, testing, and maintenance.\\n\\n### Object-oriented programming paradigm\\n\\nIn the object-oriented programming paradigm, the data and the behavior are grouped together in objects. An object is a special entity in our code that combines all of the data or attributes as well as all of the behaviors or methods into an easy-to-use container. When we want to access the data or use the behaviors, we do so through the object. This paradigm promotes code reuse, organization, and maintainability.\\n\\n## Advantages of Object-Oriented Programming\\n\\n- Encapsulation: OOP allows data to be encapsulated within objects, **which can prevent other parts of the code from directly accessing or modifying the data.** This helps to ensure `data integrity` and minimize bugs caused by unintended changes to the data.\\n  :::danger\\n  Without encapsulation, you would still need to keep track of the data and behaviour related to a task, but it would be jumbled throughout the programs.\\n  :::\\n\\n- Inheritances: OOP allows for inheritance, which enables code reuse and promotes modularity. Inheritance allows new classes to be created based on existing classes, inheriting their properties and behaviours, and then adding or modifying those properties and behaviors as needed.\\n- Polymorphism: OOP allows for polymorphism, **which means that objects of different classes can be treated as if they were the same type of object**. This enables more flexible and reusable code, since the same code can be used with different objects that have the same behavior.\\n- Abstraction: OOP allows for abstraction, which is ability to hide complex logic from the user making the code that we write easier to use in other places.\\n- Modularity: OOP promotes modularity, which makes it easier to manage large codebases by breaking them down into smaller, more manageable modules. This can improve code organization, maintenance, and testing.\\n- Code readability and maintainability: OOP can lead to more readable and maintainable code, since it closely models real-world objects and concepts. This can make it easier for developers to understand and modify code over time."},{"id":"python-lambda-function","metadata":{"permalink":"/blog/python-lambda-function","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-29-lambda-function.md","source":"@site/blog/2023-03-29-lambda-function.md","title":"Lambda Function in Python","description":"What are Lambda Functions?","date":"2023-03-29T00:00:00.000Z","formattedDate":"March 29, 2023","tags":[{"label":"python","permalink":"/blog/tags/python"}],"readingTime":3.16,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong","title":"author","url":"https://github.com/dannyseong","imageURL":"https://avatars.githubusercontent.com/u/99000722?v=4","key":"daehoon"}],"frontMatter":{"slug":"python-lambda-function","title":"Lambda Function in Python","authors":["daehoon"],"tags":["python"]},"prevItem":{"title":"Why Object-oriented Programming?","permalink":"/blog/cs-why-oop"},"nextItem":{"title":"*args and **kwargs in Python","permalink":"/blog/python-*args-**kwargs"}},"content":"## What are Lambda Functions?\\n\\nIn Python, a lambda function is a small, anonymous function that can take any number of arguments, but can only have one expression. Lambda functions are a shorthand way to create simple functions without using the def keyword.\\n\\n## Syntax of Lambda Functions\\n\\nThe syntax for a lambda function is as follows:\\n\\n```python\\nlambda arguments: expression\\n```\\n\\nHere, `arguments` refers to the input parameters of the function, and expression is the single `expression` that the function returns.\\n\\n## Comparing Lambda Functions to Normal Functions\\n\\nLet\'s take a look at how a lambda function compares to a normal function. Here\'s an example of a normal function that adds 2 to a given input:\\n\\n```python\\ndef add_two(my_input):\\n    return my_input + 2\\n```\\n\\nThe same function could be written as a lambda function:\\n\\n```python\\nadd_two = lambda my_input: my_input + 2\\n```\\n\\nNotice that in the lambda function version, we are returning `my_input + 2` without the use of a `return` keyword (the normal Python function explicitly uses the keyword `return`).\\n\\n## Practice Examples\\n\\n### Example 1: Printing a Sentence with an Exclamation Mark\\n\\n```python\\n# Normal Function\\ndef add_bang(sentence):\\n    print(sentence + \'!\')\\n# Lambda Function\\nadd_bang = lambda sentence: print(sentence + \'!\')\\n```\\n\\n### Example 2: Checking if a Grade is an A\\n\\n```python\\n# Normal Function\\ndef check_if_A_grade(grade):\\n    if grade >= 90:\\n        return \'Got an A!\'\\n    else:\\n        return \'Did not get an A.\'\\n\\n# Lambda Function\\ncheck_if_A_grade = lambda grade: \'Got an A!\' if grade >= 90 else \'Did not get an A.\'\\n```\\n\\n## When to Use Lambda Functions\\n\\nLambda functions are a good choice when we need **to create simple, one-line functions that we do not plan to reuse elsewhere in our code**. They can also be useful for creating `anonymous functions` that we need **to pass as arguments to other functions**.\\n\\nHowever, if we need to create more complex functions that are more than one line long, it is usually better to use a regular function, since it will be easier to read and maintain.\\n\\n## Advantages of Using Lambda Functions\\n\\nLambda functions have several advantages that make them useful in certain situations:\\n\\n1. Concise syntax: Lambda functions use a more concise syntax than regular functions, which can make them easier to read and write, especially for simple functions.\\n\\n2. Easy to pass as arguments: Lambda functions are often used as arguments to higher-order functions, such as `map()`, `filter()`, and `reduce()`, since they can be defined inline and passed directly as arguments.\\n\\n3. Can be defined anywhere: Lambda functions can be defined anywhere that a regular function can be defined, including inside other functions and inside list, dictionary, and set literals.\\n\\n## Limitations of Lambda Functions\\n\\nWhile lambda functions have several advantages, they also have some limitations that can make them less useful in certain situations:\\n\\n1. Limited functionality: Lambda functions are limited to a single expression, which means that they cannot be used for more complex operations that require multiple statements or statements that have side effects.\\n\\n2. No documentation: Lambda functions do not have the same level of documentation as regular functions, since they cannot have docstrings or annotations.\\n\\n3. Limited readability: While lambda functions can be more concise than regular functions, they can also be more difficult to read and understand, especially for more complex functions.\\n\\n## Conclusion\\n\\nLambda functions are a useful tool for creating simple, one-line functions in Python. They have several advantages, including concise syntax and ease of use as arguments to higher-order functions, but also have some limitations, including limited functionality and readability. When deciding whether to use a lambda function or a regular function, consider the complexity of the operation, the need for documentation and readability, and whether the function will be reused elsewhere in the code."},{"id":"python-*args-**kwargs","metadata":{"permalink":"/blog/python-*args-**kwargs","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-26-understanding-*args-and-**kwargs-in-python.md","source":"@site/blog/2023-03-26-understanding-*args-and-**kwargs-in-python.md","title":"*args and **kwargs in Python","description":"In Python, we may have come across the terms args and kwargs. While these two concepts are similar in some ways, they have distinct differences. In this article, we will explore the definition, differences, and use cases of \\\\args and kwargs.","date":"2023-03-26T00:00:00.000Z","formattedDate":"March 26, 2023","tags":[{"label":"python","permalink":"/blog/tags/python"}],"readingTime":3.945,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong","title":"author","url":"https://github.com/dannyseong","imageURL":"https://avatars.githubusercontent.com/u/99000722?v=4","key":"daehoon"}],"frontMatter":{"slug":"python-*args-**kwargs","title":"*args and **kwargs in Python","authors":["daehoon"],"tags":["python"]},"prevItem":{"title":"Lambda Function in Python","permalink":"/blog/python-lambda-function"},"nextItem":{"title":"Refactorying Exercise in JavaScript","permalink":"/blog/2023/03/29/refactorying_exercise_JS"}},"content":"In Python, we may have come across the terms `*args` and `**kwargs`. While these two concepts are similar in some ways, they have distinct differences. In this article, we will explore the definition, differences, and use cases of \\\\*args and `**kwargs`.\\n\\n## Definition\\n\\n`*args` is a special syntax in Python used to pass a variable number of arguments to a function. The `*` character before the argument name unpacks the arguments into a **tuple**.\\n\\nOn the other hand, `**kwargs` is another special syntax in Python used to pass a variable number of keyword arguments to a function. The `**` character before the argument name unpacks the keyword arguments into a **dictionary**.\\n\\nWhile both `*args` and `**kwargs` are used to pass a variable number of arguments to a function, they differ in the type of arguments they accept. `*args` is used for passing a variable number of non-keyword arguments, whereas `**kwargs` is used for passing a variable number of keyword arguments.\\n\\n## Examples of \\\\*args and \\\\*\\\\*kwargs in Python\\n\\n#### \\\\*args\\n\\n- When a function needs to accept a variable number of non-keyword arguments.\\n- When you want to pass an arbitrary number of arguments to a function.\\n\\n```python\\ndef concatenate(\\\\*args):\\n    result = \\"\\"\\n    for arg in args:\\n        result += arg\\n    return result\\n\\nprint(concatenate(\\"hello\\", \\"world\\", \\"!\\"))\\n```\\n\\n#### \\\\*\\\\*kwargs\\n\\n- When a function needs to accept a variable number of keyword arguments.\\n- When you want to pass an arbitrary number of keyword arguments to a function.\\n\\n```python\\ndef describe_person(**kwargs):\\n    name = kwargs.get(\\"name\\", \\"Unknown\\")\\n    age = kwargs.get(\\"age\\", \\"Unknown\\")\\n    city = kwargs.get(\\"city\\", \\"Unknown\\")\\n    print(f\\"Name: {name}, Age: {age}, City: {city}\\")\\n\\ndescribe_person(name=\\"John\\", age=25, city=\\"New York\\")\\n\\n```\\n\\n#### \\\\*args and \\\\*\\\\*kwargs\\n\\n- When a function needs to accept a combination of non-keyword and keyword arguments.\\n- When you want to pass both positional and keyword arguments to a function.\\n\\n```python\\ndef describe_person(*args, **kwargs):\\n    name = kwargs.get(\\"name\\", \\"Unknown\\")\\n    age = kwargs.get(\\"age\\", \\"Unknown\\")\\n    city = kwargs.get(\\"city\\", \\"Unknown\\")\\n    for arg in args:\\n        print(arg)\\n    print(f\\"Name: {name}, Age: {age}, City: {city}\\")\\n\\ndescribe_person(\\"John\\", \\"Doe\\", age=25, city=\\"New York\\")\\n```\\n\\nLike the above examples, `*args` and `**kwargs` are useful for accepting a variable number of arguments in a Python function, whether they are positional or keyword arguments.\\n\\n## Benefits of Using \\\\*args and \\\\*\\\\*kwargs in Python\\n\\n1. Flexibility\\n   Using \\\\*args and \\\\*\\\\*kwargs allows for greater flexibility when writing functions. Since they can accept any number of arguments, you can write a single function that can be used for a wide range of purposes.\\n2. Code Reusability\\n   By using \\\\*args and \\\\*\\\\*kwargs, you can write a function that can be reused in different parts of your codebase. Since the function can accept a variable number of arguments, you can use it for different purposes without having to write a new function each time.\\n3. Cleaner Code\\n   When using \\\\*args and \\\\*\\\\*kwargs, you can avoid writing repetitive code to handle arguments. Instead, you can use loops and conditionals to handle the arguments dynamically, making your code cleaner and more readable.\\n\\n## Best Practices for Using \\\\*args and \\\\*\\\\*kwargs in Python\\n\\n1. Use Descriptive Variable Names\\n   When using \\\\*args and \\\\*\\\\*kwargs, it\'s important to use descriptive variable names that make it clear what the arguments represent. This can help improve the readability and maintainability of your code.\\n2. Avoid Overusing *args and \\\\*\\\\*kwargs\\n   While *args and \\\\*\\\\*kwargs can be useful in many situations, overusing them can make your code more complex and harder to understand. It\'s important to use them only when necessary and to consider alternative solutions when possible.\\n3. Provide Default Values for Keyword Arguments\\n   When using \\\\*\\\\*kwargs, it\'s a good practice to provide default values for the keyword arguments. This can help prevent errors and make your code more robust.\\n\\n## Exceptional Use Examples\\n\\n1. Unpacking parts of an iterable\\n\\n```python\\n a, *b, c = [3, 6, 9, 12, 15]\\n print(b)\\n # output: [6, 9, 12]\\n```\\n\\n2. Inside of built-in functions\\n\\n```python\\nstart_and_stop = [3, 6]\\n\\nrange_values = range(*start_and_stop)\\nprint(list(range_values))\\n# output: [3, 4, 5]\\n```\\n\\n3. Merging iterables\\n\\n```python\\nmy_tuple = (3, 6, 9)\\nmerged_tuple = (0, *my_tuple, 12)\\nprint(merged_tuple)\\n# output: (0, 3, 6, 9, 12)\\n```\\n\\n4. Combining unpacking and packing\\n\\n```python\\nnum_collection = [3, 6, 9]\\n\\ndef power_two(*nums):\\n  for num in nums:\\n    print(num**2)\\n\\npower_two(*num_collection)\\n# output:\\n# 9\\n# 36\\n# 81\\n```\\n\\n## Conclusion\\n\\n`*args` and `**kwargs` are powerful features in Python that can help you write more flexible, reusable, and maintainable code. By understanding the definition, differences, and use cases of \\\\*args and \\\\*\\\\*kwargs, and following best practices, you can take advantage of these features to improve your Python programming skills.\\n\\n## References\\n\\n1. [Python documentation on \\\\*args and \\\\*\\\\*kwargs](https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions)\\n\\n2. [Real Python article on \\\\*args and \\\\*\\\\*kwargs](https://realpython.com/python-kwargs-and-args/)\\n\\n3. [GeeksforGeeks article on \\\\*args and \\\\*\\\\*kwargs](https://www.geeksforgeeks.org/args-kwargs-python/)"},{"id":"/2023/03/29/refactorying_exercise_JS","metadata":{"permalink":"/blog/2023/03/29/refactorying_exercise_JS","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-29-refactorying_exercise_JS.md","source":"@site/blog/2023-03-29-refactorying_exercise_JS.md","title":"Refactorying Exercise in JavaScript","description":"The objective of this contents is for reviewing my personnel study through the content in YouTube. The Youtuber, \ud504\ub871\ud2b8, make this contents and the reference link is described at the bottom of this post.","date":"2023-03-26T00:00:00.000Z","formattedDate":"March 26, 2023","tags":[],"readingTime":2.155,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong","title":"author","url":"https://github.com/dannyseong","imageURL":"https://avatars.githubusercontent.com/u/99000722?v=4","key":"daehoon"}],"frontMatter":{"layout":"post","title":"Refactorying Exercise in JavaScript","date":"2023-03-26T00:00:00.000Z","authors":["daehoon"]},"prevItem":{"title":"*args and **kwargs in Python","permalink":"/blog/python-*args-**kwargs"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"The objective of this contents is for reviewing my personnel study through the content in YouTube. The Youtuber, \ud504\ub871\ud2b8, make this contents and the reference link is described at the bottom of this post.\\n\\n### Before\\n\\n```javascript\\n// Define function for ordering coffee\\nfunction orderCoffe(el, orderList) {\\n  if (el) {\\n    if (Array.isArray(orderList)) {\\n      el.addEventListener(\\"click\\", function () {\\n        setTimeout(function () {\\n          for (let i = 0; i < orderList.length; i++) {\\n            document.querySelector(\\n              \\"#log\\"\\n            ).innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n          }\\n        }, 2000);\\n      });\\n    }\\n  }\\n}\\n// Call orderCoffee function\\norderCoffee(document.querySelector(\\"button\\"), [\\"americano\\", \\"cafeLatte\\"]);\\n```\\n\\n### After\\n\\n```javascript\\n// Assign Global variables and functions to be used\\nconst logEL = document.querySelector(\\"#log\\");\\nconst delay = (time) =>\\n  new Promise((resolve) => setTimeout(() => resolve(), time));\\nconst insertMsg = (order) => {\\n  logEL.innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n};\\n\\n// Define buttonClickHandelr Function\\nasync function buttonClickHandler(orderList) {\\n  const delayTime = 2000;\\n  await delay(delayTime);\\n  orderList.forEach(insertMsg);\\n}\\n\\n// Define orderCoffee Function\\nfunction orderCoffee(el, orderList) {\\n  if (!el || !Array.isArray(orderList)) return;\\n  el.addEventListener(\\"click\\", () => buttonClickHandler(orderList));\\n}\\n\\n// Call orderCoffee function\\norderCoffee(document.querySelector(\\"button\\"), [\\"americano\\", \\"cafeLatte\\"]);\\n```\\n\\n### Refactory Point of View\\n\\n1. If multiple `if` statement are used consecutively, they should be consolidated into one.\\n\\n```javascript\\n// Before\\nif (el) {\\n  if (Array.isArray(orderList)) {\\n    // Inner Codes...\\n  }\\n}\\n\\n// After\\nif (!el || !Array.isArray(orderList)) return;\\n```\\n\\n2. In case of callback function, it should be assgined to a separated variable, and use this variable as a parameter. This will increase the readability of the code.\\n3. Getting used to using the `Promise` object for asynchornous operation\\n\\n```javascript\\n//Before\\nel.addEventListener(\\"click\\", function () {\\n  setTimeout(function () {\\n    for (let i = 0; i < orderList.length; i++) {\\n      document.querySelector(\\n        \\"#log\\"\\n      ).innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n    }\\n  }, 2000);\\n});\\n\\n//After\\nconst logEL = document.querySelector(\\"#log\\");\\nconst delay = (time) =>\\n  new Promise((resolve) => setTimeout(() => resolve(), time));\\nconst insertMsg = (order) => {\\n  logEL.innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n};\\n```\\n\\n4. Getting used to the use of the high-order function like forEach() in JavaScript.\\n\\n```javascript\\n// Before\\nfor (let i = 0; i < orderList.length; i++) {\\n  // Inner Codes\\n}\\n// After\\norderList.forEach(insertMsg);\\n```\\n\\n5. The constant number should be assigned to a separated variable to improve the readability of the code.\\n\\n```javascript\\nconst delayTime = 2000;\\n```\\n\\n### References\\n\\n1. [\ucf54\ub4dc\ub9ac\ubdf0\uc5d0\uc11c \uce6d\ucc2c\ubc1b\uc740 \ucf54\ub4dc\uc758 \ube44\ubc00, \ud504\ub871\ud2b8](https://www.youtube.com/watch?v=BfpTtsWTWEM)"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"Refactorying Exercise in JavaScript","permalink":"/blog/2023/03/29/refactorying_exercise_JS"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."}]}')}}]);