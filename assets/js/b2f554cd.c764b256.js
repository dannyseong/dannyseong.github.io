"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/03/26/understanding-*args-and-**kwargs-in-python","metadata":{"permalink":"/blog/2023/03/26/understanding-*args-and-**kwargs-in-python","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-26-understanding-*args-and-**kwargs-in-python.md","source":"@site/blog/2023-03-26-understanding-*args-and-**kwargs-in-python.md","title":"Understanding *args and **kwargs in Python","description":"In Python, we may have come across the terms args and kwargs. While these two concepts are similar in some ways, they have distinct differences. In this article, we will explore the definition, differences, and use cases of \\\\args and kwargs.","date":"2023-03-26T00:00:00.000Z","formattedDate":"March 26, 2023","tags":[],"readingTime":3.945,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong"}],"frontMatter":{"layout":"post","title":"Understanding *args and **kwargs in Python","date":"2023-03-26T00:00:00.000Z","categories":"jekyll update","author":"Daehoon Seong"},"nextItem":{"title":"Exercise of Refactorying 1, JavaScript","permalink":"/blog/2023/03/29/lambda-function"}},"content":"In Python, we may have come across the terms `*args` and `**kwargs`. While these two concepts are similar in some ways, they have distinct differences. In this article, we will explore the definition, differences, and use cases of \\\\*args and `**kwargs`.\\n\\n## Definition\\n\\n`*args` is a special syntax in Python used to pass a variable number of arguments to a function. The `*` character before the argument name unpacks the arguments into a **tuple**.\\n\\nOn the other hand, `**kwargs` is another special syntax in Python used to pass a variable number of keyword arguments to a function. The `**` character before the argument name unpacks the keyword arguments into a **dictionary**.\\n\\nWhile both `*args` and `**kwargs` are used to pass a variable number of arguments to a function, they differ in the type of arguments they accept. `*args` is used for passing a variable number of non-keyword arguments, whereas `**kwargs` is used for passing a variable number of keyword arguments.\\n\\n## Examples of \\\\*args and \\\\*\\\\*kwargs in Python\\n\\n#### \\\\*args\\n\\n- When a function needs to accept a variable number of non-keyword arguments.\\n- When you want to pass an arbitrary number of arguments to a function.\\n\\n```python\\ndef concatenate(\\\\*args):\\n    result = \\"\\"\\n    for arg in args:\\n        result += arg\\n    return result\\n\\nprint(concatenate(\\"hello\\", \\"world\\", \\"!\\"))\\n```\\n\\n#### \\\\*\\\\*kwargs\\n\\n- When a function needs to accept a variable number of keyword arguments.\\n- When you want to pass an arbitrary number of keyword arguments to a function.\\n\\n```python\\ndef describe_person(**kwargs):\\n    name = kwargs.get(\\"name\\", \\"Unknown\\")\\n    age = kwargs.get(\\"age\\", \\"Unknown\\")\\n    city = kwargs.get(\\"city\\", \\"Unknown\\")\\n    print(f\\"Name: {name}, Age: {age}, City: {city}\\")\\n\\ndescribe_person(name=\\"John\\", age=25, city=\\"New York\\")\\n\\n```\\n\\n#### \\\\*args and \\\\*\\\\*kwargs\\n\\n- When a function needs to accept a combination of non-keyword and keyword arguments.\\n- When you want to pass both positional and keyword arguments to a function.\\n\\n```python\\ndef describe_person(*args, **kwargs):\\n    name = kwargs.get(\\"name\\", \\"Unknown\\")\\n    age = kwargs.get(\\"age\\", \\"Unknown\\")\\n    city = kwargs.get(\\"city\\", \\"Unknown\\")\\n    for arg in args:\\n        print(arg)\\n    print(f\\"Name: {name}, Age: {age}, City: {city}\\")\\n\\ndescribe_person(\\"John\\", \\"Doe\\", age=25, city=\\"New York\\")\\n```\\n\\nLike the above examples, `*args` and `**kwargs` are useful for accepting a variable number of arguments in a Python function, whether they are positional or keyword arguments.\\n\\n## Benefits of Using \\\\*args and \\\\*\\\\*kwargs in Python\\n\\n1. Flexibility\\n   Using \\\\*args and \\\\*\\\\*kwargs allows for greater flexibility when writing functions. Since they can accept any number of arguments, you can write a single function that can be used for a wide range of purposes.\\n2. Code Reusability\\n   By using \\\\*args and \\\\*\\\\*kwargs, you can write a function that can be reused in different parts of your codebase. Since the function can accept a variable number of arguments, you can use it for different purposes without having to write a new function each time.\\n3. Cleaner Code\\n   When using \\\\*args and \\\\*\\\\*kwargs, you can avoid writing repetitive code to handle arguments. Instead, you can use loops and conditionals to handle the arguments dynamically, making your code cleaner and more readable.\\n\\n## Best Practices for Using \\\\*args and \\\\*\\\\*kwargs in Python\\n\\n1. Use Descriptive Variable Names\\n   When using \\\\*args and \\\\*\\\\*kwargs, it\'s important to use descriptive variable names that make it clear what the arguments represent. This can help improve the readability and maintainability of your code.\\n2. Avoid Overusing *args and \\\\*\\\\*kwargs\\n   While *args and \\\\*\\\\*kwargs can be useful in many situations, overusing them can make your code more complex and harder to understand. It\'s important to use them only when necessary and to consider alternative solutions when possible.\\n3. Provide Default Values for Keyword Arguments\\n   When using \\\\*\\\\*kwargs, it\'s a good practice to provide default values for the keyword arguments. This can help prevent errors and make your code more robust.\\n\\n## Exceptional Use Examples\\n\\n1. Unpacking parts of an iterable\\n\\n```python\\n a, *b, c = [3, 6, 9, 12, 15]\\n print(b)\\n # output: [6, 9, 12]\\n```\\n\\n2. Inside of built-in functions\\n\\n```python\\nstart_and_stop = [3, 6]\\n\\nrange_values = range(*start_and_stop)\\nprint(list(range_values))\\n# output: [3, 4, 5]\\n```\\n\\n3. Merging iterables\\n\\n```python\\nmy_tuple = (3, 6, 9)\\nmerged_tuple = (0, *my_tuple, 12)\\nprint(merged_tuple)\\n# output: (0, 3, 6, 9, 12)\\n```\\n\\n4. Combining unpacking and packing\\n\\n```python\\nnum_collection = [3, 6, 9]\\n\\ndef power_two(*nums):\\n  for num in nums:\\n    print(num**2)\\n\\npower_two(*num_collection)\\n# output:\\n# 9\\n# 36\\n# 81\\n```\\n\\n## Conclusion\\n\\n`*args` and `**kwargs` are powerful features in Python that can help you write more flexible, reusable, and maintainable code. By understanding the definition, differences, and use cases of \\\\*args and \\\\*\\\\*kwargs, and following best practices, you can take advantage of these features to improve your Python programming skills.\\n\\n## References\\n\\n1. [Python documentation on \\\\*args and \\\\*\\\\*kwargs](https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions)\\n\\n2. [Real Python article on \\\\*args and \\\\*\\\\*kwargs](https://realpython.com/python-kwargs-and-args/)\\n\\n3. [GeeksforGeeks article on \\\\*args and \\\\*\\\\*kwargs](https://www.geeksforgeeks.org/args-kwargs-python/)"},{"id":"/2023/03/29/lambda-function","metadata":{"permalink":"/blog/2023/03/29/lambda-function","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-29-lambda-function.md","source":"@site/blog/2023-03-29-lambda-function.md","title":"Exercise of Refactorying 1, JavaScript","description":"In Python, a\xa0lambda function\xa0(also commonly called an\xa0anonymous function) is a one-line shorthand for function. Let\u2019s start by examining how lambda functions compare to the normal functions we have already been writing.","date":"2023-03-26T00:00:00.000Z","formattedDate":"March 26, 2023","tags":[],"readingTime":1.565,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong"}],"frontMatter":{"layout":"post","title":"Exercise of Refactorying 1, JavaScript","date":"2023-03-26T00:00:00.000Z","categories":"jekyll update","author":"Daehoon Seong"},"prevItem":{"title":"Understanding *args and **kwargs in Python","permalink":"/blog/2023/03/26/understanding-*args-and-**kwargs-in-python"},"nextItem":{"title":"Refactorying Exercise (JavaScript)","permalink":"/blog/2023/03/29/refactorying_exercise_JS"}},"content":"In Python, a\xa0*lambda function*\xa0(also commonly called an\xa0*anonymous function*) is a one-line shorthand for function. Let\u2019s start by examining how lambda functions compare to the normal functions we have already been writing.\\n\\nTake for example, a function called add_two():\\n\\n```python\\ndef add_two(my_input):\\n\\treturn my_input + 2\\n```\\n\\nThe same function could be written as a lambda function:\\n\\n```python\\nadd_two = lambda my_input: my_input + 2\\n```\\n\\nLet\u2019s break this syntax down:\\n\\n1. The function is stored in a variable called\xa0**`add_two`**.\\n2. The\xa0**`lambda`**\xa0keyword declares that this is a lambda function (similar to how we use\xa0**`def`**\xa0to declare a normal function).\\n3. **`my_input`**\xa0is a parameter used to hold the value passed to\xa0**`add_two`**.\\n4. In the lambda function version, we are returning\xa0**`my_input + 2`**\xa0without the use of a\xa0**`return`**\xa0keyword (the normal Python function explicitly uses the keyword\xa0**`return`**).\\n\\n## Practice\\n\\n```python\\ndef add_bang(sentence):\\n\\tprint(sentence + \'!\')\\n\\nadd_bang = lambda sentence: print(sentence + \'!\')\\n```\\n\\nOur lambda functions can be more complex than the above example. For instance, let\u2019s say we want a function that will perform differently based on different inputs.\\n\\nLet\u2019s say that we have a function\xa0**`check_if_A_grade`**\xa0that outputs\xa0**`\'Got an A!\'`**\xa0if a grade is at least 90, and otherwise says you\xa0**`\'Did not get an A.\'`**. So, the code:\\n\\n```python\\ncheck_if_A_gread = lambda grade: \'Got an A\' if grade >= 90 else \'Did not get an A.\'\\n```\\n\\nThis is what our line of code does:\\n\\n1. **`lambda grade:`**\xa0declares a lambda function with the parameter\xa0**`grade`**\\n2. Return\xa0**`\'Got an A!\'`**\xa0if this statement is true:\\n\\n   ```python\\n   grade >= 90\\n   ```\\n\\n3. Otherwise, return\xa0**`\'Did not get an A.\'`**\\n\\nLambda functions are the preferred way of creating one-line functions. The reduced syntax assists code readability and the functions can be implemented where code reuse is not the primary objective. If we wanted our function complexity to extend beyond one line, we would opt for a regular function since making our function longer would impair readability."},{"id":"/2023/03/29/refactorying_exercise_JS","metadata":{"permalink":"/blog/2023/03/29/refactorying_exercise_JS","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-29-refactorying_exercise_JS.md","source":"@site/blog/2023-03-29-refactorying_exercise_JS.md","title":"Refactorying Exercise (JavaScript)","description":"The objective of this contents is for reviewing my personnel study through the content in YouTube. The Youtuber, \ud504\ub871\ud2b8, make this contents and the reference link is described at the bottom of this post.","date":"2023-03-26T00:00:00.000Z","formattedDate":"March 26, 2023","tags":[],"readingTime":2.155,"hasTruncateMarker":false,"authors":[{"name":"Daehoon Seong"}],"frontMatter":{"layout":"post","title":"Refactorying Exercise (JavaScript)","date":"2023-03-26T00:00:00.000Z","categories":"jekyll update","author":"Daehoon Seong"},"prevItem":{"title":"Exercise of Refactorying 1, JavaScript","permalink":"/blog/2023/03/29/lambda-function"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"The objective of this contents is for reviewing my personnel study through the content in YouTube. The Youtuber, \ud504\ub871\ud2b8, make this contents and the reference link is described at the bottom of this post.\\n\\n### Before\\n\\n```javascript\\n// Define function for ordering coffee\\nfunction orderCoffe(el, orderList) {\\n  if (el) {\\n    if (Array.isArray(orderList)) {\\n      el.addEventListener(\\"click\\", function () {\\n        setTimeout(function () {\\n          for (let i = 0; i < orderList.length; i++) {\\n            document.querySelector(\\n              \\"#log\\"\\n            ).innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n          }\\n        }, 2000);\\n      });\\n    }\\n  }\\n}\\n// Call orderCoffee function\\norderCoffee(document.querySelector(\\"button\\"), [\\"americano\\", \\"cafeLatte\\"]);\\n```\\n\\n### After\\n\\n```javascript\\n// Assign Global variables and functions to be used\\nconst logEL = document.querySelector(\\"#log\\");\\nconst delay = (time) =>\\n  new Promise((resolve) => setTimeout(() => resolve(), time));\\nconst insertMsg = (order) => {\\n  logEL.innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n};\\n\\n// Define buttonClickHandelr Function\\nasync function buttonClickHandler(orderList) {\\n  const delayTime = 2000;\\n  await delay(delayTime);\\n  orderList.forEach(insertMsg);\\n}\\n\\n// Define orderCoffee Function\\nfunction orderCoffee(el, orderList) {\\n  if (!el || !Array.isArray(orderList)) return;\\n  el.addEventListener(\\"click\\", () => buttonClickHandler(orderList));\\n}\\n\\n// Call orderCoffee function\\norderCoffee(document.querySelector(\\"button\\"), [\\"americano\\", \\"cafeLatte\\"]);\\n```\\n\\n### Refactory Point of View\\n\\n1. If multiple `if` statement are used consecutively, they should be consolidated into one.\\n\\n```javascript\\n// Before\\nif (el) {\\n  if (Array.isArray(orderList)) {\\n    // Inner Codes...\\n  }\\n}\\n\\n// After\\nif (!el || !Array.isArray(orderList)) return;\\n```\\n\\n2. In case of callback function, it should be assgined to a separated variable, and use this variable as a parameter. This will increase the readability of the code.\\n3. Getting used to using the `Promise` object for asynchornous operation\\n\\n```javascript\\n//Before\\nel.addEventListener(\\"click\\", function () {\\n  setTimeout(function () {\\n    for (let i = 0; i < orderList.length; i++) {\\n      document.querySelector(\\n        \\"#log\\"\\n      ).innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n    }\\n  }, 2000);\\n});\\n\\n//After\\nconst logEL = document.querySelector(\\"#log\\");\\nconst delay = (time) =>\\n  new Promise((resolve) => setTimeout(() => resolve(), time));\\nconst insertMsg = (order) => {\\n  logEL.innerHTML += `${orderList[i]}\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4<br />`;\\n};\\n```\\n\\n4. Getting used to the use of the high-order function like forEach() in JavaScript.\\n\\n```javascript\\n// Before\\nfor (let i = 0; i < orderList.length; i++) {\\n  // Inner Codes\\n}\\n// After\\norderList.forEach(insertMsg);\\n```\\n\\n5. The constant number should be assigned to a separated variable to improve the readability of the code.\\n\\n```javascript\\nconst delayTime = 2000;\\n```\\n\\n### References\\n\\n1. [\ucf54\ub4dc\ub9ac\ubdf0\uc5d0\uc11c \uce6d\ucc2c\ubc1b\uc740 \ucf54\ub4dc\uc758 \ube44\ubc00, \ud504\ub871\ud2b8](https://www.youtube.com/watch?v=BfpTtsWTWEM)"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"Refactorying Exercise (JavaScript)","permalink":"/blog/2023/03/29/refactorying_exercise_JS"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Endilie Yacop Sucipto","title":"Maintainer of Docusaurus","url":"https://github.com/endiliey","imageURL":"https://github.com/endiliey.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"]},"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);