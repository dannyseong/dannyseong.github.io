"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9056],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var r=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=r.createContext({}),m=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(a),g=o,u=p["".concat(s,".").concat(g)]||p[g]||c[g]||n;return a?r.createElement(u,i(i({ref:t},d),{},{components:a})):r.createElement(u,i({ref:t},d))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,i=new Array(n);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<n;m++)i[m]=a[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},539:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>n,metadata:()=>l,toc:()=>m});var r=a(7462),o=(a(7294),a(3905));const n={slug:"cs-why-oop",title:"Why Object-oriented Programming?",authors:{name:"Daehoon Seong",title:"author",url:"https://github.com/seongdaehoon",image_url:"https://avatars.githubusercontent.com/u/99000722?v=4"},tags:["cs","oop"]},i=void 0,l={permalink:"/blog/cs-why-oop",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-31-why-oop.md",source:"@site/blog/2023-03-31-why-oop.md",title:"Why Object-oriented Programming?",description:"In the world of computer programming, the complexity of the code being written has increased with the evolution of computers. Programming languages and best practices have evolved to suit the needs of developers, leading to what we now call programming paradigms. A programming paradigm is a specific style of organizing and writing programs with the goal of increased organization, fewer bugs, and better code maintainability.",date:"2023-03-31T00:00:00.000Z",formattedDate:"March 31, 2023",tags:[{label:"cs",permalink:"/blog/tags/cs"},{label:"oop",permalink:"/blog/tags/oop"}],readingTime:3.065,hasTruncateMarker:!1,authors:[{name:"Daehoon Seong",title:"author",url:"https://github.com/seongdaehoon",image_url:"https://avatars.githubusercontent.com/u/99000722?v=4",imageURL:"https://avatars.githubusercontent.com/u/99000722?v=4"}],frontMatter:{slug:"cs-why-oop",title:"Why Object-oriented Programming?",authors:{name:"Daehoon Seong",title:"author",url:"https://github.com/seongdaehoon",image_url:"https://avatars.githubusercontent.com/u/99000722?v=4",imageURL:"https://avatars.githubusercontent.com/u/99000722?v=4"},tags:["cs","oop"]},prevItem:{title:"Multiple Inheritance in Python",permalink:"/blog/python-multiple-inheritance"},nextItem:{title:"Lambda Function in Python",permalink:"/blog/python-lambda-function"}},s={authorsImageUrls:[void 0]},m=[{value:"Data and Behavior in Programs",id:"data-and-behavior-in-programs",level:2},{value:"Popular Programming Paradigms: Procedural, Functional and Object-oriented",id:"popular-programming-paradigms-procedural-functional-and-object-oriented",level:2},{value:"Procedural programming paradigm",id:"procedural-programming-paradigm",level:3},{value:"Functional programming paradigm",id:"functional-programming-paradigm",level:3},{value:"Object-oriented programming paradigm",id:"object-oriented-programming-paradigm",level:3},{value:"Advantages of Object-Oriented Programming",id:"advantages-of-object-oriented-programming",level:2}],d={toc:m},p="wrapper";function c(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the world of computer programming, the complexity of the code being written has increased with the evolution of computers. Programming languages and best practices have evolved to suit the needs of developers, leading to what we now call programming paradigms. A programming paradigm is a specific style of organizing and writing programs with the goal of increased organization, fewer bugs, and better code maintainability."),(0,o.kt)("h2",{id:"data-and-behavior-in-programs"},"Data and Behavior in Programs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All programs have two fundamental components: ",(0,o.kt)("inlineCode",{parentName:"li"},"data")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"behavior"),"."),(0,o.kt)("li",{parentName:"ul"},"The data is what the program knows, and the behavior is what the program can do with its data.")),(0,o.kt)("h2",{id:"popular-programming-paradigms-procedural-functional-and-object-oriented"},"Popular Programming Paradigms: Procedural, Functional and Object-oriented"),(0,o.kt)("admonition",{title:"My tip",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The primary focus of a programming paradigm is how a program deals with its data and behaviour.")),(0,o.kt)("h3",{id:"procedural-programming-paradigm"},"Procedural programming paradigm"),(0,o.kt)("p",null,"In the procedural programming paradigm, the data and behaviors are combined into the same set of step-by-step instructions. When we need to use the behaviors, we manipulate the data directly, thus changing the overall state of our applications. The order of our code is crucial, and our data is mutated directly as the program carries out its behavior. This can make it challenging to manage complex programs and maintain code over time."),(0,o.kt)("h3",{id:"functional-programming-paradigm"},"Functional programming paradigm"),(0,o.kt)("p",null,"In the functional programming paradigm, the data and behavior are kept separate. When we want to use the behaviors, we abstract them into pure functions that take our data as input and return an updated copy of our data as output, rather than directly mutating the data. Instead of mutating the data directly, we rely on pure functions to return a new copy of updated data. This paradigm promotes code modularity, testing, and maintenance."),(0,o.kt)("h3",{id:"object-oriented-programming-paradigm"},"Object-oriented programming paradigm"),(0,o.kt)("p",null,"In the object-oriented programming paradigm, the data and the behavior are grouped together in objects. An object is a special entity in our code that combines all of the data or attributes as well as all of the behaviors or methods into an easy-to-use container. When we want to access the data or use the behaviors, we do so through the object. This paradigm promotes code reuse, organization, and maintainability."),(0,o.kt)("h2",{id:"advantages-of-object-oriented-programming"},"Advantages of Object-Oriented Programming"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Encapsulation: OOP allows data to be encapsulated within objects, ",(0,o.kt)("strong",{parentName:"p"},"which can prevent other parts of the code from directly accessing or modifying the data.")," This helps to ensure ",(0,o.kt)("inlineCode",{parentName:"p"},"data integrity")," and minimize bugs caused by unintended changes to the data."),(0,o.kt)("admonition",{parentName:"li",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Without encapsulation, you would still need to keep track of the data and behaviour related to a task, but it would be jumbled throughout the programs."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inheritances: OOP allows for inheritance, which enables code reuse and promotes modularity. Inheritance allows new classes to be created based on existing classes, inheriting their properties and behaviours, and then adding or modifying those properties and behaviors as needed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Polymorphism: OOP allows for polymorphism, ",(0,o.kt)("strong",{parentName:"p"},"which means that objects of different classes can be treated as if they were the same type of object"),". This enables more flexible and reusable code, since the same code can be used with different objects that have the same behavior.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Abstraction: OOP allows for abstraction, which is ability to hide complex logic from the user making the code that we write easier to use in other places.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Modularity: OOP promotes modularity, which makes it easier to manage large codebases by breaking them down into smaller, more manageable modules. This can improve code organization, maintenance, and testing.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Code readability and maintainability: OOP can lead to more readable and maintainable code, since it closely models real-world objects and concepts. This can make it easier for developers to understand and modify code over time."))))}c.isMDXComponent=!0}}]);