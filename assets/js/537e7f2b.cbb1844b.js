"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={layout:"post",title:"Exercise of Refactorying 1, JavaScript",date:new Date("2023-03-26T00:00:00.000Z"),categories:"jekyll update",author:"Daehoon Seong"},i="Lambda Functions",l={permalink:"/blog/2023/03/29/lambda-function",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-29-lambda-function.md",source:"@site/blog/2023-03-29-lambda-function.md",title:"Exercise of Refactorying 1, JavaScript",description:"In Python, a\xa0lambda function\xa0(also commonly called an\xa0anonymous function) is a one-line shorthand for function. Let\u2019s start by examining how lambda functions compare to the normal functions we have already been writing.",date:"2023-03-26T00:00:00.000Z",formattedDate:"March 26, 2023",tags:[],readingTime:1.565,hasTruncateMarker:!1,authors:[{name:"Daehoon Seong"}],frontMatter:{layout:"post",title:"Exercise of Refactorying 1, JavaScript",date:"2023-03-26T00:00:00.000Z",categories:"jekyll update",author:"Daehoon Seong"},prevItem:{title:"Understanding *args and **kwargs in Python",permalink:"/blog/2023/03/26/understanding-*args-and-**kwargs-in-python"},nextItem:{title:"Refactorying Exercise (JavaScript)",permalink:"/blog/2023/03/29/refactorying_exercise_JS"}},p={authorsImageUrls:[void 0]},s=[{value:"Practice",id:"practice",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Python, a\xa0",(0,r.kt)("em",{parentName:"p"},"lambda function"),"\xa0(also commonly called an\xa0",(0,r.kt)("em",{parentName:"p"},"anonymous function"),") is a one-line shorthand for function. Let\u2019s start by examining how lambda functions compare to the normal functions we have already been writing."),(0,r.kt)("p",null,"Take for example, a function called add_two():"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_two(my_input):\n    return my_input + 2\n")),(0,r.kt)("p",null,"The same function could be written as a lambda function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"add_two = lambda my_input: my_input + 2\n")),(0,r.kt)("p",null,"Let\u2019s break this syntax down:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The function is stored in a variable called\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"add_two")),"."),(0,r.kt)("li",{parentName:"ol"},"The\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"lambda")),"\xa0keyword declares that this is a lambda function (similar to how we use\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"def")),"\xa0to declare a normal function)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"my_input")),"\xa0is a parameter used to hold the value passed to\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"add_two")),"."),(0,r.kt)("li",{parentName:"ol"},"In the lambda function version, we are returning\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"my_input + 2")),"\xa0without the use of a\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"return")),"\xa0keyword (the normal Python function explicitly uses the keyword\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"return")),").")),(0,r.kt)("h2",{id:"practice"},"Practice"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_bang(sentence):\n    print(sentence + '!')\n\nadd_bang = lambda sentence: print(sentence + '!')\n")),(0,r.kt)("p",null,"Our lambda functions can be more complex than the above example. For instance, let\u2019s say we want a function that will perform differently based on different inputs."),(0,r.kt)("p",null,"Let\u2019s say that we have a function\xa0",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"check_if_A_grade")),"\xa0that outputs\xa0",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"'Got an A!'")),"\xa0if a grade is at least 90, and otherwise says you\xa0",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"'Did not get an A.'")),". So, the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"check_if_A_gread = lambda grade: 'Got an A' if grade >= 90 else 'Did not get an A.'\n")),(0,r.kt)("p",null,"This is what our line of code does:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"lambda grade:")),"\xa0declares a lambda function with the parameter\xa0",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"grade")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Return\xa0",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"'Got an A!'")),"\xa0if this statement is true:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"grade >= 90\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Otherwise, return\xa0",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"'Did not get an A.'"))))),(0,r.kt)("p",null,"Lambda functions are the preferred way of creating one-line functions. The reduced syntax assists code readability and the functions can be implemented where code reuse is not the primary objective. If we wanted our function complexity to extend beyond one line, we would opt for a regular function since making our function longer would impair readability."))}u.isMDXComponent=!0}}]);